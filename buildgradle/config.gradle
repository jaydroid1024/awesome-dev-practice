import groovy.json.JsonOutput

// 根据exext属性是ExtensionAware类型的一个特殊的属性，本质是一个Map类型的变量，
// 而 ExtentionAware接口的实现类为Project, Settings, Task, SourceSet等，
// ExtentionAware可以在运行时扩充属性，而这里的ext，就是里面的一个特殊的属性而已。
ext {

    android = [
            compileSdkVersion = 30,
            buildToolsVersion = '30.0.3',
            minSdk = 21,
            targetSdk = 30,
            versionCode = 1,
            versionName = "1.0.0"
    ]


    java = [
            javaSourceCompatibility = JavaVersion.VERSION_1_8,
            javaTargetCompatibility = JavaVersion.VERSION_1_8
    ]
    

    //三方依赖库多个依赖路径引入同一个版本号时需要提取版本号
    version = [
            buildGradleVersion = '4.1.1',
            kotlinVersion = '1.5.30',
            stethoVersion = '1.5.1',
            retrofitVersion = '2.8.1',
            okhttpVersion = '4.5.0',
            glideVersion = '4.11.0',
            chuckVersion = '1.1.0',
            chuckerVersion = '3.2.0',
            butterknifeVersion = '10.2.1',
            immersionbarVersion = '3.0.0',
            tinkerVersion = '1.9.14',
            roomVersion = '2.2.6',
            hintVersion = '2.28-alpha',

    ]

    //引入三方依赖库时考虑该库到稳定性，可维护性，需要标明引入到github地址并归类放置


    dependencies = [
            /** ========================================================= */
            /** =================== android/androidX ==================== */
            /** ========================================================= */
            kotlinStdlibJdk7 = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion",
            appcompat = 'androidx.appcompat:appcompat:1.2.0',
            coreKtx = 'androidx.core:core-ktx:1.2.0',
            junit = 'junit:junit:4.12',
            junitX = 'androidx.test.ext:junit:1.1.1',
            espressoCore = 'androidx.test.espresso:espresso-core:3.2.0',
            androidJUnitRunner = "android.support.test.runner.AndroidJUnitRunner",
            constraintLayout = "androidx.constraintlayout:constraintlayout:2.0.4",

            lifecycleExtensions = "androidx.lifecycle:lifecycle-extensions:2.2.0",
            activityKtx = "androidx.activity:activity-ktx:1.1.0",
            fragmentKtx = "androidx.fragment:fragment-ktx:1.0.0",
            lifecycleRuntimeKtx = "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha01",
            lifecycleViewmodelKtx = "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0",
            lifecycleLivedataKtx = "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha01",

            datastore = "androidx.datastore:datastore:1.0.0-alpha04",


            roomRuntime = "androidx.room:room-runtime:$roomVersion",
            roomCompiler = "androidx.room:room-compiler:$roomVersion",
            // optional - Kotlin Extensions and Coroutines support for Room
            roomKtx = "androidx.room:room-ktx:$roomVersion",
            // optional - RxJava support for Room
            roomRxjava2 = "androidx.room:room-rxjava2:$roomVersion",

            hiltAndroid = "com.google.dagger:hilt-android:$hintVersion",
            hiltAndroidCompiler = "com.google.dagger:hilt-android-compiler:$hintVersion",

            /** ========================================================= */
            /** ========================= kotlin ======================== */
            /** ========================================================= */
            //kotlin-stdlib-jdk7
            kotlinStdlibJdk7 = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion",
            //kotlin-stdlib-jdk8
            kotlinStdlibJdk8 = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            kotlinStdlibJdk83 = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:3.7.21",
            //anko-sqlite
            ankoSqlite = "org.jetbrains.anko:anko-sqlite:0.10.5",
            //kotlin-reflect
            kotlinReflect = "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
            kotlinxCoroutinesAndroid = 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9',


            /** ========================================================= */
            /** ========================== tools ======================== */
            /** ========================================================= */
            //stetho 调试工具 https://github.com/facebook/stetho
            stetho = "com.facebook.stetho:stetho:$stethoVersion",
            //stetho 网络调试 https://github.com/facebook/stetho
            stethoOkhttp3 = "com.facebook.stetho:stetho-okhttp3:$stethoVersion",
            //stetho 网络调试 https://github.com/facebook/stetho
            stethoUrlconnection = "com.facebook.stetho:stetho-urlconnection:$stethoVersion",

            //Chuck Okhttp日志打印工具 https://github.com/jgilfelt/chuck
            chuckDebug = "com.readystatesoftware.chuck:library:$chuckVersion",
            //Chuck Okhttp日志打印工具 https://github.com/jgilfelt/chuck
            chuckRelease = "com.readystatesoftware.chuck:library-no-op:$chuckVersion",
            //Chucker Okhttp日志和Android异常信息打印工具 https://github.com/ChuckerTeam/chucker
            ChuckerDebug = "com.github.ChuckerTeam.Chucker:library:$chuckerVersion",
            //Chucker Okhttp日志和Android异常信息打印工具 https://github.com/ChuckerTeam/chucker
            ChuckerRelease = "com.github.ChuckerTeam.Chucker:library-no-op:$chuckerVersion",

            //logger https://github.com/orhanobut/logger
            logger = "com.orhanobut:logger:2.2.0",

            //arouter api https://github.com/alibaba/ARouter
            arouterApi = "com.alibaba:arouter-api:1.5.0",
            //arouter compiler https://github.com/alibaba/ARouter
            arouterCompiler = "com.alibaba:arouter-compiler:1.2.2",

            //butterknife https://github.com/JakeWharton/butterknife
            butterknife = "com.jakewharton:butterknife:$butterknifeVersion",
            //butterknifeCompiler https://github.com/JakeWharton/butterknife
            butterknifeCompiler = "com.jakewharton:butterknife-compiler:$butterknifeVersion",

            //eventbus https://github.com/greenrobot/EventBus
            eventbus = 'org.greenrobot:eventbus:3.2.0',
            //greendao https://github.com/greenrobot/greenDAO
            greendao = 'org.greenrobot:greendao:3.2.2',

            //gson https://github.com/google/gson
            gson = 'com.google.code.gson:gson:2.8.6',

            rxPreferences = 'com.f2prateek.rx.preferences2:rx-preferences:2.0.1',

            mmkvStatic = 'com.tencent:mmkv-static:1.2.7',


            /** ========================================================= */
            /** ========================= network ======================= */
            /** ========================================================= */
            //retrofit https://github.com/square/retrofit
            retrofit = "com.squareup.retrofit2:retrofit:$retrofitVersion",
            //retrofit converter-gson https://github.com/square/retrofit/blob/master/retrofit-converters/gson/README.md
            retrofitConverterGson = "com.squareup.retrofit2:converter-gson:$retrofitVersion",
            //retrofit adapter-rxjava https://github.com/square/retrofit/tree/master/retrofit-adapters/rxjava2
            retrofitAdapterRxjava = "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion",
            // Retrofit 同时支持多个 BaseUrl 以及动态改变 BaseUrl(已知问题：不同url 的https证书问题) https://github.com/JessYanCoding/RetrofitUrlManager
            retrofitUrlManager = "me.jessyan:retrofit-url-manager:1.4.0",

            //okhttp https://github.com/square/okhttp
            okhttp = "com.squareup.okhttp3:okhttp:$okhttpVersion",
            //okhttp logging-interceptor https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/README.md
            okhttpLoggingInterceptor = "com.squareup.okhttp3:logging-interceptor:$okhttpVersion",
            // PersistentCookieJar https://github.com/franmontiel/PersistentCookieJar
            persistentcookiejar = "com.github.franmontiel:PersistentCookieJar:v1.0.1",

            //rxjava https://github.com/ReactiveX/RxJava  todo rxjava:3.x.x
            rxjava = 'io.reactivex.rxjava2:rxjava:2.2.10',
            //rxandroid https://github.com/ReactiveX/RxAndroid todo rxandroid:3.x.x
            rxandroid = 'io.reactivex.rxjava2:rxandroid:2.1.1',

            //glide 图片加载 https://github.com/bumptech/glide
            glide = "com.github.bumptech.glide:glide:$glideVersion",
            //glide图片加载注解 https://github.com/bumptech/glide
            glideAnnotationProcessor = "com.github.bumptech.glide:compiler:$glideVersion",
            //https://github.com/danikula/AndroidVideoCache
            videocache = "com.danikula:videocache:2.7.0",


            /** ========================================================= */
            /** ========================== UI相关 ======================== */
            /** ========================================================= */
            // statusbarUtil https://github.com/laobie/StatusBarUtil
            statusbarUtil = "com.jaeger.statusbarutil:library:1.5.1",

            circleimageview = 'de.hdodenhof:circleimageview:3.1.0',

            tagcloudlib= 'com.moxun:tagcloudlib:1.2.0',

            // 基础依赖包，必须要依赖 https://github.com/gyf-dev/ImmersionBar
            immersionbar = "com.gyf.immersionbar:immersionbar:$immersionbarVersion",
            // fragment快速实现（可选） https://github.com/gyf-dev/ImmersionBar
            immersionbarComponents = "com.gyf.immersionbar:immersionbar-components:$immersionbarVersion",
            // kotlin扩展（可选） https://github.com/gyf-dev/ImmersionBar
            immersionbarKtx = "com.gyf.immersionbar:immersionbar-ktx:$immersionbarVersion",
            //
            recyclerAdapterHelper = "com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4",

            //
            smartRefreshLayout = "com.scwang.smartrefresh:SmartRefreshLayout:1.1.0",
            //
            banner = "com.youth.banner:banner:1.4.10",

            banner2 = "com.youth.banner:banner:2.1.0",

            viewpager2 = "androidx.viewpager2:viewpager2:1.0.0",
            //
            lottie = "com.airbnb.android:lottie:2.7.0",

            //easypermissions
            easypermissions = "pub.devrel:easypermissions:1.1.1",
            //rxpermissions
            rxpermissions = "com.github.tbruyelle:rxpermissions:0.10.2",
            //模糊效果
            blurry = 'jp.wasabeef:blurry:4.0.0',


            /** ========================================================= */
            /** ========================== 三方SDK ======================= */
            /** ========================================================= */
            //tinker热修复：tinker的核心库
            tinkerLib = "com.tencent.tinker:tinker-android-lib:$tinkerVersion",
            tinkerLoader = "com.tencent.tinker:tinker-android-loader:$tinkerVersion",
            //tinker热修复：可选，用于生成application类
            tinkerAnno = "com.tencent.tinker:tinker-android-anno:$tinkerVersion",
            //微信
            wechat = "com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+",
            //腾讯x5内核
            tbssdk = 'com.tencent.tbs.tbssdk:sdk:43903',


            /** ========================================================= */
            /** ======================== components ===================== */
            /** ========================================================= */
            //maven components
            base_lib = 'com.jaydroid.base_lib:base_lib:1.0.0',
            base_component = 'com.jaydroid.base_component:base_component:2.0.0',
            base_component_wan = 'com.jaydroid.base_dev:base_dev:2.0.0',
            main = "com.jaydroid.main:main:1.0.0",
            login = "com.jaydroid.login:login:1.0.0",

    ]
    /* ========================================================= */
    /* ==========================签名信息======================== */
    /* ========================================================= */
//    println("/* ========================签名信息======================= */")

    def rootDir = rootDir.path
    //签名信息
    def keyProps = getKeyProperties()
    sign = [
            //debug sign
            aliasDebug    : keyProps["aliasDebug"],
            passDebug     : keyProps["passDebug"],
            storeDebug    : file(keyProps["storeDebug"]),
            storePassDebug: keyProps["storePassDebug"],
            //release sign
            alias         : keyProps["alias"],
            pass          : keyProps["pass"],
            store         : file(keyProps["store"]),
            storePass     : keyProps["storePass"]
    ]


    /* ========================================================= */
    /* ========================环境变量信息======================= */
    /* ========================================================= */
//    println("/* ========================环境变量信息======================= */")
    def debugEnvironmentProps = getEnvironmentProperties(getEnvironmentPropertyType())
    def liveEnvironmentProps = getEnvironmentProperties("live")
//    println("debugEnvironmentProps:$debugEnvironmentProps")
//    println("liveEnvironmentProps:$liveEnvironmentProps")
//    println("propertyType:${getEnvironmentPropertyType()}")

    //将当前指定到环境转为Json缓存到BuildConfig中
    def debugEnvironmentJson = getAllEnvironmentJson(debugEnvironmentProps)
    println("debugEnvironmentJson:$debugEnvironmentJson")
    //将当前指定到环境转为Json缓存到BuildConfig中
    def releaseEnvironmentJson = getAllEnvironmentJson(liveEnvironmentProps)
    println("releaseEnvironmentJson:$releaseEnvironmentJson")
    environment = [
            // 测试环境 Properties dev local
            debugEnvironmentProps : debugEnvironmentProps,
            // 线上环境 Properties live
            liveEnvironmentProps  : liveEnvironmentProps,

            // 测试环境 json dev local
            debugEnvironmentJson  : debugEnvironmentJson,
            // 线上环境 json live
            releaseEnvironmentJson: releaseEnvironmentJson
    ]

    /* ========================================================= */
    /* ======================组件Maven仓库信息==================== */
    /* ========================================================= */
//    println("\n/* ========================组件Maven仓库信息======================= */")
//    //组件Maven仓库信息
//    def mavenProps = getMavenProperties()
//    println("mavenProps" + mavenProps.toString())
//    mavenRepo = [
//            //MavenProperties
//            mavenProps    : mavenProps,
//            //local
//            repoPathLocal : mavenProps["repoPathLocal"],
//            //remote
//            repoPathRemote: mavenProps["repoPathRemote"],
//            //userName
//            userName      : mavenProps["userName"],
//            //password
//            password      : mavenProps["password"]
//    ]


}


/**
 * 将集合转为json 字符串
 * @param allEnvironmentList
 * @return
 */
static String getAllEnvironmentJson(Object allEnvironmentList) {
    // 使用assert确保存在该属性否则报错，避免错误打包
    assert allEnvironmentList
    def jsonList = new JsonOutput().toJson(allEnvironmentList)
    return jsonList.replaceAll("\"", "\\\\\"")
}

/**
 * 获取属性总配置文件
 * @return Properties实例 config
 */
Properties getConfigProperties() {
    def CONFIG_PATH = "./buildsystem/config.properties"
    return getProperties(CONFIG_PATH)
}

/**
 * 获取属性配置文件公共方法
 * @param propPath Properties配置文件路径
 * @return Properties实例
 */
Properties getProperties(String propPath) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(propPath)))
    return props
}

/**
 * 获取签名配置文件
 * @return Properties实例  签名
 */
Properties getKeyProperties() {
    Properties configProperties = getConfigProperties()
    // 使用assert确保存在该属性否则报错，避免错误打包
    assert configProperties['keystore.props.file']
    return getProperties(configProperties.getProperty("keystore.props.file"))
}

/**
 * 获取Maven仓库配置文件
 * @return Properties实例  Maven
 */
Properties getMavenProperties() {
    Properties configProperties = getConfigProperties()
    // 使用assert确保存在该属性否则报错，避免错误打包
    assert configProperties['maven.props.file']
    return getProperties(configProperties.getProperty("maven.props.file"))
}

/**
 * 获取当前指定的环境类型，缺省dev
 * @return
 */
String getEnvironmentPropertyType() {
    Properties localProperties = getConfigProperties()
    return localProperties.getProperty("propertyType", "dev")
}

//根据环境类型获取环境配置文件
Properties getEnvironmentProperties(String propertyType) {
    Properties localProperties = getConfigProperties()
    String environmentPath = "${propertyType}.props.file"
    // 使用assert确保存在该属性否则报错，避免错误打包
    assert localProperties[environmentPath]
    return getProperties(localProperties.getProperty(environmentPath))
}


